---
- hosts: localhost
  gather_facts: no
  tasks:
   - name: Clone the source repository
     git:
       repo: "https://{{git_user | urlencode}}:{{ git_pass | urlencode }}@github.com/<Your_Organisation_Name>/{{ github_repo }}.git"
       dest: "/tmp/gitbranch/{{target_branch}}/"
       version: "{{source_branch}}"

   - name: This task registers whether the target branch exists or not, which will be used in subsequent tasks to discard the branch.Please ignore, If this task fails.
     command: "git ls-remote --exit-code --heads 'https://{{git_user | urlencode}} :{{ git_pass | urlencode }}@github.com/<Your_Organisation_Name>/{{ github_repo }}.git' {{ target_branch }}"
     register: check_branch
     args:
       chdir: "/tmp/gitbranch/{{target_branch}}"
     ignore_errors: true
     
   - name: Fail play book if target rebase branch not exist on Github
     fail:
       msg: "Target rebase branch not exist in the repository, Please check and provide correct branch name to rebase"
     when: check_branch.rc != 0 
   
   - name: Set Git configuration for commit author
     command: 'git config --local user.name "{{git_user}}"'
     args: 
       chdir: "/tmp/gitbranch/{{target_branch}}"

#In git for rename , we need to create a new branch with desired name and need to drop old branch from remote.
   - name: register discarding folder name with current time on system
     shell: echo "{{ target_branch }}_Discarded_$(date +%d%b%y%H%M%S)"
     register: renamed_branch_name
     when: check_branch.rc == 0 

   - name: creates a branch for rename as discarded
     shell: "git checkout {{target_branch}} && git push origin {{target_branch}}:{{renamed_branch_name.stdout}}"
     args:
       chdir: "/tmp/gitbranch/{{target_branch}}"
     ignore_errors: true
     when: check_branch.rc == 0
   
   - name: This task will cross verify the discarded branch exist or not in github repository.
     shell: "git ls-remote --exit-code --heads 'https://{{git_user | urlencode}} :{{ git_pass | urlencode }}@github.com/<Your_Organisation_Name>/{{ github_repo }}.git' {{ renamed_branch_name.stdout }}"
     args:
       chdir: "/tmp/gitbranch/{{target_branch}}"
     register: verify_rename_branch
     ignore_errors: true
     when: check_branch.rc == 0 


   - name: fail if renamed branch not exist on github repository
     fail:
      msg: "Renamed branch not exist in remote repo, please reach out to v3ops team for more information."
     when: verify_rename_branch.rc != 0

   - name: deletes the target branch in remote and local repositories after taking old branch backup.
     shell: |
       git push origin :{{target_branch}}
       git checkout {{source_branch}} && git branch -D {{target_branch}}
     args:
       chdir: "/tmp/gitbranch/{{target_branch}}"
     ignore_errors: true
     when: check_branch.rc == 0 

#New branch creation plays starts from here

   - name: Create new branch and switch on local repository
     command: "git checkout -b {{target_branch}} {{ commit | default('HEAD', true)}}"
     args: 
       chdir: "/tmp/gitbranch/{{target_branch}}"

   - name: grep snapshot value from pom file
     shell: grep "SNAPSHOT" pom.xml  | cut -d  '>' -f2 | cut -d '<' -f1
     register: source_snapshot_value
     args:
      chdir: "/tmp/gitbranch/{{target_branch}}"

   - name: update pom files with snapshot version
     shell: find -name '*.xml' | xargs sed -i 's/{{source_snapshot_value.stdout}}/{{target_branch}}-SNAPSHOT/g'
     args:
       chdir: "/tmp/gitbranch/{{target_branch}}"

   - name: Display all modified files
     shell: |
       echo "Number of files modified: $(git status | grep 'modified' | wc -l)" && git status|grep 'modified'
     args:
       chdir: "/tmp/gitbranch/{{target_branch}}"
     register: modified_files

   - debug:
       var: modified_files.stdout_lines

   - name: Add changes to STAGE and commit to local repository
     shell: |
       git add .
       git commit -m "updated POM files"
     args:
       chdir: "/tmp/gitbranch/{{target_branch}}"
     register: git_stage
     changed_when: git_stage.stdout != ""

   - name: Push changes to remote repository
     shell: "git push -u origin {{ target_branch }}"
     args:
       chdir: "/tmp/gitbranch/{{ target_branch }}"
     register: git_push
     changed_when: git_push.stdout != ""

   - name: Clean up the cloned repository
     file:
       path: /tmp/gitbranch/{{target_branch}}
       state: absent

